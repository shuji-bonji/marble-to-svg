{"version":3,"file":"index-C82bb7n7.js","sources":["../../src/types.ts","../../src/utils/constants.ts","../../src/parser/parseMarble.ts","../../src/renderer/renderSVG.ts","../../src/components/MarbleViewer.ts","../../src/main.ts"],"sourcesContent":["/**\n * 通知の種類（next / complete / error）\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  COMPLETE = 'C',\n  ERROR = 'E',\n}\n\n/**\n * サブスクリプションの種類（subscribe / unsubscribe）\n */\nexport enum SubscriptionKind {\n  SUBSCRIBE = 'S',\n  UNSUBSCRIBE = 'U',\n}\n/**\n * 通知オブジェクト\n *\n */\nexport interface Notification<T = any> {\n  kind: NotificationKind;\n  value?: T;\n  error?: any;\n}\n// T:\n// - マーブル記法 a の値として数値 1 をマッピングする場合: value: 1\n// - マーブル記法 b の値としてオブジェクト { id: 1, name: 'test' } をマッピングする場合: value: { id: 1, name: 'test' }\n// - マーブル記法 c の値として配列 [1, 2, 3] をマッピングする場合: value: [1, 2, 3]\n\n/**\n * サブスクリプション通知オブジェクト\n */\nexport interface SubscriptionNotification {\n  kind: SubscriptionKind;\n  value: 'subscribe' | 'unsubscribe';\n}\n\n/**\n * マーブルイベント\n */\nexport interface MarbleEvent<T = any> {\n  frame: number;\n  notification: Notification<T> | SubscriptionNotification;\n}\n\n/**\n * SVG描画設定\n */\nexport interface RenderOptions {\n  // SVGの全体サイズ\n  width: number;\n  height: number;\n  // マージン\n  margin: {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n  };\n  // 時間軸の設定\n  timeline: {\n    strokeWidth: number;\n    stroke: string;\n    tickLength: number;\n  };\n  // マーカー（Nextイベント）の設定\n  markers: {\n    radius: number;\n    stroke: string;\n    strokeWidth: number;\n    fill: string;\n    textFill: string;\n    fontSize: number;\n  };\n  // 完了マーカーの設定\n  complete: {\n    stroke: string;\n    strokeWidth: number;\n    height: number;\n  };\n  // エラーマーカーの設定\n  error: {\n    stroke: string;\n    strokeWidth: number;\n    size: number;\n  };\n  // サブスクリプションマーカーの設定\n  subscription: {\n    stroke: string;\n    strokeWidth: number;\n    height: number;\n  };\n  // フレームごとの幅（ピクセル）\n  frameWidth: number;\n}\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object\n    ? T[P] extends Function\n      ? T[P]\n      : DeepPartial<T[P]>\n    : T[P];\n};\n\n/**\n * マーブルパース設定\n */\nexport interface ParseOptions<T = any> {\n  // 文字から値へのマッピング\n  values?: Record<string, T>;\n  // エラーオブジェクト\n  error?: any;\n  // サブスクリプションフレーム情報を含むかどうか\n  includeSubscription?: boolean;\n}\n\n/**\n * マーブルフレームの内部表現\n */\nexport interface MarbleFrame {\n  index: number; // フレームのインデックス\n  values: string[]; // このフレームで発生する値\n  complete: boolean; // 完了フラグ\n  error: boolean; // エラーフラグ\n  subscribe?: boolean; // 購読開始フラグ（Hot Observable）\n  unsubscribe?: boolean; // 購読解除フラグ\n}\n","import { RenderOptions } from '../types';\n\n/**\n * マーブル記法の特殊文字\n */\nexport const MARBLE_SYNTAX = {\n  FRAME: '-', // 時間の経過（1フレーム）\n  COMPLETE: '|', // 完了通知\n  ERROR: '#', // エラー通知\n  GROUP_START: '(', // グループ開始\n  GROUP_END: ')', // グループ終了\n  SUBSCRIBE: '^', // 購読開始\n  UNSUBSCRIBE: '!', // 購読解除\n};\n\n/**\n * デフォルトのSVG描画設定\n */\nexport const DEFAULT_RENDER_OPTIONS: RenderOptions = {\n  width: 800,\n  height: 60,\n  margin: {\n    top: 20,\n    right: 30,\n    bottom: 10,\n    left: 30,\n  },\n  timeline: {\n    strokeWidth: 2,\n    stroke: '#999',\n    tickLength: 5,\n  },\n  markers: {\n    radius: 15,\n    stroke: '#555',\n    strokeWidth: 1.5,\n    fill: '#fff',\n    textFill: '#333',\n    fontSize: 12,\n  },\n  complete: {\n    stroke: '#555',\n    strokeWidth: 2,\n    height: 30,\n  },\n  error: {\n    stroke: '#d44',\n    strokeWidth: 2,\n    size: 15,\n  },\n  subscription: {\n    stroke: '#080',\n    strokeWidth: 1.5,\n    height: 25,\n  },\n  frameWidth: 30,\n};\n\n/**\n * マーブル記法のバリデーションパターン\n */\nexport const VALIDATION_PATTERNS = {\n  // 有効な値の文字\n  VALUE_CHAR: /^[0-9a-zA-Z]$/,\n  // スペース文字（無視される）\n  SPACE: /^\\s$/,\n};\n","import {\n  MarbleEvent,\n  Notification,\n  ParseOptions,\n  MarbleFrame,\n  SubscriptionNotification,\n  NotificationKind,\n  SubscriptionKind,\n} from '../types';\nimport { MARBLE_SYNTAX, VALIDATION_PATTERNS } from '../utils/constants';\n\n/**\n * マーブル記法の文字列をパースしてMarbleEvent[]に変換する\n * @param marbleString マーブル記法の文字列\n * @param options パースオプション\n * @returns MarbleEventの配列\n */\nexport function parseMarble<T = any>(\n  marbleString: string,\n  options: ParseOptions<T> = {}\n): MarbleEvent<T>[] {\n  const {\n    values = {},\n    error = new Error('Marble Error'),\n    includeSubscription = true,\n  } = options;\n\n  // マーブル文字列から各フレームの情報を抽出\n  const frames = parseMarbleToFrames(marbleString, includeSubscription);\n\n  // フレーム情報をMarbleEvent[]に変換\n  return framesToMarbleEvents(frames, values, error);\n}\n\n/**\n * マーブル文字列をフレーム情報に分解する\n * @param marbleString マーブル記法の文字列\n * @param includeSubscription サブスクリプション情報を含めるかどうか\n * @returns フレーム情報の配列\n */\nconst parseMarbleToFrames = (\n  marbleString: string,\n  includeSubscription: boolean\n): MarbleFrame[] => {\n  const frames: MarbleFrame[] = [];\n  let frameIndex = 0;\n  let inGroup = false;\n  let currentGroupValues: string[] = [];\n\n  for (const char of marbleString) {\n    if (VALIDATION_PATTERNS.SPACE.test(char)) continue;\n\n    switch (char) {\n      case MARBLE_SYNTAX.GROUP_START: // グループ開始\n        inGroup = true;\n        currentGroupValues = [];\n        break;\n\n      case MARBLE_SYNTAX.GROUP_END: // グループ終了\n        inGroup = false;\n        // 現在のフレームにグループの値を設定\n        if (currentGroupValues.length > 0) {\n          ensureFrame(frames, frameIndex);\n          frames[frameIndex].values.push(...currentGroupValues);\n        }\n        frameIndex++;\n        break;\n\n      case MARBLE_SYNTAX.FRAME: // 時間経過（フレーム）\n        if (!inGroup) frameIndex++;\n        break;\n\n      case MARBLE_SYNTAX.COMPLETE:\n      case MARBLE_SYNTAX.ERROR:\n      case MARBLE_SYNTAX.SUBSCRIBE:\n      case MARBLE_SYNTAX.UNSUBSCRIBE:\n        ensureFrame(frames, frameIndex);\n        // 完了通知\n        if (char === MARBLE_SYNTAX.COMPLETE) frames[frameIndex].complete = true;\n        // エラー通知\n        if (char === MARBLE_SYNTAX.ERROR) frames[frameIndex].error = true;\n        // 購読開始（Hot Observable）\n        if (char === MARBLE_SYNTAX.SUBSCRIBE && includeSubscription)\n          frames[frameIndex].subscribe = true;\n        // 購読解除\n        if (char === MARBLE_SYNTAX.UNSUBSCRIBE && includeSubscription)\n          frames[frameIndex].unsubscribe = true;\n        if (!inGroup) frameIndex++;\n        break;\n\n      default:\n        // 値\n        if (VALIDATION_PATTERNS.VALUE_CHAR.test(char)) {\n          if (inGroup) {\n            currentGroupValues.push(char);\n          } else {\n            ensureFrame(frames, frameIndex);\n            frames[frameIndex].values.push(char);\n            frameIndex++;\n          }\n        } else {\n          // 無効な文字の場合はエラー\n          throw new Error(\n            `Invalid character \"${char}\" at position ${marbleString.indexOf(\n              char\n            )}`\n          );\n        }\n    }\n  }\n  return frames;\n};\n\n/**\n * 指定されたインデックスのフレームが存在することを確認\n * 存在しない場合は作成する\n * @param frames フレーム配列\n * @param index フレームインデックス\n */\nconst ensureFrame = (frames: MarbleFrame[], index: number): void => {\n  if (frames[index]) return;\n  frames[index] = {\n    index,\n    values: [],\n    complete: false,\n    error: false,\n  };\n};\n\n/**\n * フレーム情報をMarbleEvent[]に変換する\n * @param frames フレーム情報の配列\n * @param values 文字から値へのマッピング\n * @param error エラーオブジェクト\n * @returns MarbleEventの配列\n */\nconst framesToMarbleEvents = <T = any>(\n  frames: MarbleFrame[],\n  values: Record<string, T>,\n  error: any\n): MarbleEvent<T>[] => {\n  const events: MarbleEvent<T>[] = [];\n  // 各フレームを処理\n  frames.forEach(\n    ({\n      index,\n      values: valChars,\n      complete,\n      error: err,\n      subscribe,\n      unsubscribe,\n    }) => {\n      // 値のイベント\n      valChars.forEach((char) => {\n        const value = char in values ? values[char] : (char as any);\n        events.push({\n          frame: index,\n          notification: createNotification(NotificationKind.NEXT, value),\n        });\n      });\n\n      // 完了イベント\n      if (complete)\n        events.push({\n          frame: index,\n          notification: createNotification(NotificationKind.COMPLETE),\n        });\n\n      // エラーイベント\n      if (err)\n        events.push({\n          frame: index,\n          notification: createNotification(\n            NotificationKind.ERROR,\n            undefined,\n            error\n          ),\n        });\n\n      // 購読開始イベント\n      if (subscribe)\n        events.push({\n          frame: index,\n          notification: createSubscriptionNotification(\n            SubscriptionKind.SUBSCRIBE\n          ),\n        });\n\n      // 購読解除イベント\n      if (unsubscribe)\n        events.push({\n          frame: index,\n          notification: createSubscriptionNotification(\n            SubscriptionKind.UNSUBSCRIBE\n          ),\n        });\n    }\n  );\n  return events;\n};\n\n/**\n *\n * 通知の生成\n * @param kind 通知の種類（next / complete / error）\n * @param value 値\n * @param error エラー\n * @returns Notification\n */\nfunction createNotification<T>(\n  kind: NotificationKind.NEXT,\n  value: T\n): Notification<T>;\nfunction createNotification(\n  kind: NotificationKind.COMPLETE\n): Notification<undefined>;\nfunction createNotification(\n  kind: NotificationKind.ERROR,\n  value?: undefined,\n  error?: any\n): Notification<undefined>;\nfunction createNotification<T>(\n  kind: NotificationKind,\n  value?: T,\n  error?: any\n): Notification<T> {\n  switch (kind) {\n    case NotificationKind.NEXT:\n      return { kind, value: value! };\n    case NotificationKind.COMPLETE:\n      return { kind };\n    case NotificationKind.ERROR:\n      return { kind, error };\n  }\n}\n\n/**\n * 購読通知の生成\n * @param kind  サブスクリプションの種類（subscribe / unsubscribe）\n * @returns SubscriptionNotification\n */\nconst createSubscriptionNotification = (\n  kind: SubscriptionKind\n): SubscriptionNotification => {\n  return {\n    kind,\n    value: kind === 'S' ? 'subscribe' : 'unsubscribe',\n  };\n};\n","/**\n * 描画関数：完了イベント\n */\nfunction renderCompleteEvent(\n  x: number,\n  timelineY: number,\n  complete: any\n): string {\n  let s = '';\n  s += `<line x1=\"${x}\" y1=\"${timelineY - complete.height / 2}\" x2=\"${x}\" y2=\"${\n    timelineY + complete.height / 2\n  }\" stroke=\"${complete.stroke}\" stroke-width=\"${complete.strokeWidth}\" />`;\n  s += `<path d=\"M ${x - 5} ${timelineY - complete.height / 2} L ${x} ${\n    timelineY - complete.height / 2 - 5\n  } L ${x + 5} ${timelineY - complete.height / 2} Z\" fill=\"${\n    complete.stroke\n  }\" />`;\n  return s;\n}\n\n/**\n * 描画関数：エラーイベント\n */\nfunction renderErrorEvent(x: number, timelineY: number, error: any): string {\n  let s = '';\n  const errorSize = error.size;\n  s += `<line x1=\"${x}\" y1=\"${timelineY - errorSize / 2}\" x2=\"${x}\" y2=\"${\n    timelineY + errorSize / 2\n  }\" stroke=\"${error.stroke}\" stroke-width=\"${error.strokeWidth}\" />`;\n  s += `<path d=\"M ${x - errorSize / 2} ${timelineY - errorSize / 2} L ${\n    x + errorSize / 2\n  } ${timelineY + errorSize / 2} M ${x - errorSize / 2} ${\n    timelineY + errorSize / 2\n  } L ${x + errorSize / 2} ${timelineY - errorSize / 2}\" stroke=\"${\n    error.stroke\n  }\" stroke-width=\"${error.strokeWidth}\" />`;\n  return s;\n}\n\n/**\n * 描画関数：次の値イベント\n */\nfunction renderNextEvent(\n  x: number,\n  timelineY: number,\n  markers: any,\n  notification: any\n): string {\n  let s = '';\n  const value = String(\n    notification.value !== undefined ? notification.value : ''\n  );\n  s += `<circle cx=\"${x}\" cy=\"${timelineY}\" r=\"${markers.radius}\" fill=\"${markers.fill}\" stroke=\"${markers.stroke}\" stroke-width=\"${markers.strokeWidth}\" />`;\n  s += `<text x=\"${x}\" y=\"${\n    timelineY + markers.fontSize / 3\n  }\" text-anchor=\"middle\" font-size=\"${markers.fontSize}\" fill=\"${\n    markers.textFill\n  }\">${escapeXml(value)}</text>`;\n  return s;\n}\n\n/**\n * 描画関数：サブスクライブマーカー\n */\nfunction renderSubscribeMarker(\n  x: number,\n  timelineY: number,\n  subscription: any\n): string {\n  let s = '';\n  s += `<line x1=\"${x}\" y1=\"${\n    timelineY - subscription.height / 2\n  }\" x2=\"${x}\" y2=\"${timelineY + subscription.height / 2}\" stroke=\"${\n    subscription.stroke\n  }\" stroke-width=\"${subscription.strokeWidth}\" stroke-dasharray=\"3,1\" />`;\n  s += `<text x=\"${x + 2}\" y=\"${\n    timelineY - subscription.height / 2 - 5\n  }\" font-size=\"10\" fill=\"${subscription.stroke}\">subscribe</text>`;\n  return s;\n}\n\n/**\n * 描画関数：アンサブスクライブマーカー\n */\nfunction renderUnsubscribeMarker(\n  x: number,\n  timelineY: number,\n  subscription: any\n): string {\n  let s = '';\n  s += `<line x1=\"${x}\" y1=\"${\n    timelineY - subscription.height / 2\n  }\" x2=\"${x}\" y2=\"${timelineY + subscription.height / 2}\" stroke=\"${\n    subscription.stroke\n  }\" stroke-width=\"${subscription.strokeWidth}\" stroke-dasharray=\"2,1\" />`;\n  s += `<text x=\"${x + 2}\" y=\"${\n    timelineY - subscription.height / 2 - 5\n  }\" font-size=\"10\" fill=\"${subscription.stroke}\">unsubscribe</text>`;\n  return s;\n}\nimport {\n  DeepPartial,\n  MarbleEvent,\n  NotificationKind,\n  RenderOptions,\n  SubscriptionKind,\n} from '../types';\nimport { DEFAULT_RENDER_OPTIONS } from '../utils/constants';\n\n/**\n * MarbleEvent[]をSVG文字列に変換する\n * @param events MarbleEventの配列\n * @param options レンダリングオプション\n * @returns SVG文字列\n */\nexport function renderSVG<T = any>(\n  events: MarbleEvent<T>[],\n  options?: DeepPartial<RenderOptions>\n): string {\n  const opts = deepMerge(DEFAULT_RENDER_OPTIONS, options);\n  const {\n    width,\n    height,\n    margin,\n    timeline,\n    markers,\n    complete,\n    error,\n    subscription,\n    frameWidth,\n  } = opts;\n\n  // 実際の描画領域のサイズを計算\n  const drawingWidth = opts.width - (opts.margin.left + opts.margin.right);\n  const drawingHeight = opts.height - (opts.margin.top + opts.margin.bottom);\n\n  // 最大フレーム番号を取得\n  const maxFrame = Math.max(...events.map((e) => e.frame), 0);\n\n  // フレーム番号から座標への変換関数\n  const frameToX = (frame: number): number => {\n    return margin.left + frame * frameWidth;\n  };\n\n  // ヘッダー（SVGタグ、スタイル）を生成\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">`;\n\n  // タイムライン（軸）を描画\n  const timelineY = margin.top + drawingHeight / 2;\n  svg += `<line x1=\"${margin.left}\" y1=\"${timelineY}\" x2=\"${\n    margin.left + Math.min(drawingWidth, (maxFrame + 1) * frameWidth)\n  }\" y2=\"${timelineY}\" stroke=\"${timeline.stroke}\" stroke-width=\"${\n    timeline.strokeWidth\n  }\" />`;\n\n  // フレームごとの目盛りを描画\n  for (let i = 0; i <= maxFrame + 1; i++) {\n    const x = frameToX(i);\n    svg += `<line x1=\"${x}\" y1=\"${\n      timelineY - timeline.tickLength\n    }\" x2=\"${x}\" y2=\"${timelineY + timeline.tickLength}\" stroke=\"${\n      timeline.stroke\n    }\" stroke-width=\"${timeline.strokeWidth}\" />`;\n  }\n\n  // サブスクリプション開始/終了イベントを描画\n  const subscribeEvents = events.filter(\n    (e) => (e.notification as any).kind === SubscriptionKind.SUBSCRIBE\n  );\n  const unsubscribeEvents = events.filter(\n    (e) => (e.notification as any).kind === SubscriptionKind.UNSUBSCRIBE\n  );\n\n  subscribeEvents.forEach((e) => {\n    const x = frameToX(e.frame);\n    svg += renderSubscribeMarker(x, timelineY, subscription);\n  });\n\n  unsubscribeEvents.forEach((e) => {\n    const x = frameToX(e.frame);\n    svg += renderUnsubscribeMarker(x, timelineY, subscription);\n  });\n\n  // 各イベントを処理\n  events.forEach((event) => {\n    const { frame, notification } = event;\n    const x = frameToX(frame);\n    if (notification.kind === NotificationKind.COMPLETE) {\n      svg += renderCompleteEvent(x, timelineY, complete);\n      return;\n    }\n    if (notification.kind === NotificationKind.ERROR) {\n      svg += renderErrorEvent(x, timelineY, error);\n      return;\n    }\n    if (notification.kind === NotificationKind.NEXT) {\n      svg += renderNextEvent(x, timelineY, markers, notification);\n    }\n  });\n\n  // SVGを閉じる\n  svg += '</svg>';\n\n  return svg;\n}\n\n/**\n * テキストの幅を推定する（おおよその計算）\n * @param text テキスト\n * @param fontSize フォントサイズ\n * @returns 推定幅\n */\n// function getTextWidth(text: string, fontSize: number): number {\n//   // 簡易的な計算：文字数 * フォントサイズの0.6倍\n//   return text.length * fontSize * 0.6;\n// }\n\n/**\n * XMLテキスト内の特殊文字をエスケープする\n * @param text エスケープするテキスト\n * @returns エスケープされたテキスト\n */\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}\n\n/**\n * オプションは指定するプロパティのみを設定したいため、RenderOptionsにマージする\n * @param base 初期値が入っているRenderOptions\n * @param override オーバーライドしたいプロパティがあるRenderOptions\n * @returns マージしたRenderOptions\n */\nfunction deepMerge<T>(base: T, override?: DeepPartial<T>): T {\n  if (!override) return base;\n  const result = { ...base };\n  for (const key in override) {\n    if (\n      override[key] &&\n      typeof override[key] === 'object' &&\n      !Array.isArray(override[key])\n    ) {\n      result[key] = deepMerge(base[key], override[key] as any);\n    } else {\n      result[key] = override[key] as any;\n    }\n  }\n  return result;\n}\n","import { parseMarble } from '../parser/parseMarble';\nimport { renderSVG } from '../renderer/renderSVG';\nimport { RenderOptions, ParseOptions } from '../types';\n\n/**\n * マーブルビューワーコンポーネント\n * マーブル記法の入力を受け取り、SVGを生成・表示する\n */\nexport class MarbleViewer {\n  private container: HTMLElement;\n  private inputElement!: HTMLTextAreaElement;\n  private valuesElement!: HTMLTextAreaElement;\n  private renderButton!: HTMLButtonElement;\n  private svgContainer!: HTMLDivElement;\n  private downloadButton!: HTMLButtonElement;\n  private renderOptions: Partial<RenderOptions>;\n  private lastSvg: string = '';\n\n  /**\n   * コンストラクタ\n   * @param containerId コンテナ要素のID\n   * @param renderOptions レンダリングオプション\n   */\n  constructor(containerId: string, renderOptions: Partial<RenderOptions> = {}) {\n    const container = document.getElementById(containerId);\n    if (!container) {\n      throw new Error(`Container element with id '${containerId}' not found`);\n    }\n\n    this.container = container;\n    this.renderOptions = renderOptions;\n\n    this.createUI();\n    this.bindEvents();\n  }\n\n  /**\n   * UIを作成する\n   */\n  private createUI(): void {\n    // コンテナをクリア\n    this.container.innerHTML = '';\n\n    // 入力フォームを作成\n    const formDiv = document.createElement('div');\n    formDiv.className = 'marble-form';\n\n    // マーブル入力フィールド\n    const marbleLabel = document.createElement('label');\n    marbleLabel.textContent = 'マーブル記法：';\n    marbleLabel.htmlFor = 'marble-input';\n\n    this.inputElement = document.createElement('textarea');\n    this.inputElement.id = 'marble-input';\n    this.inputElement.rows = 3;\n    this.inputElement.placeholder = '例: ---a---b---|';\n\n    // 値マッピング入力フィールド\n    const valuesLabel = document.createElement('label');\n    valuesLabel.textContent = '値のマッピング（JSON形式）：';\n    valuesLabel.htmlFor = 'values-input';\n\n    this.valuesElement = document.createElement('textarea');\n    this.valuesElement.id = 'values-input';\n    this.valuesElement.rows = 3;\n    this.valuesElement.placeholder = '例: { \"a\": \"Hello\", \"b\": \"World\" }';\n\n    // レンダリングボタン\n    this.renderButton = document.createElement('button');\n    this.renderButton.textContent = 'SVG生成';\n    this.renderButton.className = 'render-button';\n\n    // SVG表示コンテナ\n    this.svgContainer = document.createElement('div');\n    this.svgContainer.className = 'svg-container';\n\n    // ダウンロードボタン\n    this.downloadButton = document.createElement('button');\n    this.downloadButton.textContent = 'SVGをダウンロード';\n    this.downloadButton.className = 'download-button';\n    this.downloadButton.style.display = 'none'; // 初期状態では非表示\n\n    // 要素を追加\n    formDiv.appendChild(marbleLabel);\n    formDiv.appendChild(this.inputElement);\n    formDiv.appendChild(valuesLabel);\n    formDiv.appendChild(this.valuesElement);\n    formDiv.appendChild(this.renderButton);\n\n    this.container.appendChild(formDiv);\n    this.container.appendChild(this.svgContainer);\n    this.container.appendChild(this.downloadButton);\n  }\n\n  /**\n   * イベントをバインドする\n   */\n  private bindEvents(): void {\n    // レンダリングボタンのクリックイベント\n    this.renderButton.addEventListener('click', () => {\n      this.render();\n    });\n\n    // Enterキーで自動レンダリング\n    this.inputElement.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.render();\n      }\n    });\n\n    // ダウンロードボタンのクリックイベント\n    this.downloadButton.addEventListener('click', () => {\n      this.downloadSvg();\n    });\n  }\n\n  /**\n   * マーブルをレンダリングする\n   */\n  private parseInput(): { events: any } | null {\n    const marbleString = this.inputElement.value.trim();\n    if (!marbleString) {\n      this.showError('マーブル記法を入力してください');\n      return null;\n    }\n\n    let values = {};\n    const valuesString = this.valuesElement.value.trim();\n    if (valuesString) {\n      try {\n        values = JSON.parse(valuesString);\n      } catch (e) {\n        this.showError('値のマッピングが不正なJSON形式です');\n        return null;\n      }\n    }\n\n    const parseOptions: ParseOptions = {\n      values,\n      includeSubscription: true,\n    };\n\n    const events = parseMarble(marbleString, parseOptions);\n    return { events };\n  }\n\n  private generateSvg(events: any): string {\n    const svg = renderSVG(events, this.renderOptions);\n    this.lastSvg = svg;\n    return svg;\n  }\n\n  private updateUi(svg: string): void {\n    this.svgContainer.innerHTML = svg;\n    this.showSuccess();\n    this.downloadButton.style.display = 'block';\n  }\n\n  public render(): void {\n    const result = this.parseInput();\n    if (!result) return;\n    const svg = this.generateSvg(result.events);\n    this.updateUi(svg);\n  }\n\n  /**\n   * SVGをダウンロードする\n   */\n  private downloadSvg(): void {\n    if (!this.lastSvg) return;\n\n    // SVGをBlobに変換\n    const blob = new Blob([this.lastSvg], { type: 'image/svg+xml' });\n    const url = URL.createObjectURL(blob);\n\n    // ダウンロードリンクを作成\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'marble-diagram.svg';\n    a.click();\n\n    // URLを解放\n    setTimeout(() => {\n      URL.revokeObjectURL(url);\n    }, 100);\n  }\n\n  /**\n   * エラーメッセージを表示\n   * @param message エラーメッセージ\n   */\n  private showError(message: string): void {\n    this.svgContainer.innerHTML = `<div class=\"error-message\">${message}</div>`;\n    this.downloadButton.style.display = 'none';\n  }\n\n  /**\n   * 成功メッセージを表示\n   */\n  private showSuccess(): void {\n    // エラーメッセージをクリア\n    const errorElement = this.svgContainer.querySelector('.error-message');\n    if (errorElement) errorElement.remove();\n  }\n\n  /**\n   * 値をセットする\n   * @param marbleString マーブル記法の文字列\n   * @param values 値のマッピング\n   */\n  public setValues(\n    marbleString: string,\n    values: Record<string, any> = {}\n  ): void {\n    this.inputElement.value = marbleString;\n    this.valuesElement.value = JSON.stringify(values, null, 2);\n    this.render();\n  }\n}\n","import { MarbleViewer } from './components/MarbleViewer';\nimport { DEFAULT_RENDER_OPTIONS } from './utils/constants';\nimport { parseMarble } from './parser/parseMarble';\nimport { renderSVG } from './renderer/renderSVG';\n\n// グローバルにエクスポート（外部からの利用をサポート）\n(window as any).MarbleTools = {\n  parseMarble,\n  renderSVG,\n  MarbleViewer,\n};\n\n// ドキュメントロード時にビューワーを初期化\ndocument.addEventListener('DOMContentLoaded', () => {\n  // ビューワーを初期化\n  const viewer = new MarbleViewer(\n    'marble-viewer-container',\n    DEFAULT_RENDER_OPTIONS\n  );\n\n  // サンプル例\n  const exampleSelector = document.getElementById(\n    'example-selector'\n  ) as HTMLSelectElement;\n  // const loadExampleButton = document.getElementById(\n  //   'load-example'\n  // ) as HTMLButtonElement;\n\n  // サンプル例データ\n  const examples = {\n    basic: {\n      marble: '---a---b---|',\n      values: { a: 'Hello', b: 'World' },\n    },\n    error: {\n      marble: '---a---b---#',\n      values: { a: 1, b: 2 },\n    },\n    group: {\n      marble: '---(abc)---|',\n      values: { a: 1, b: 2, c: 3 },\n    },\n    hot: {\n      marble: '-a-^-b---c---|',\n      values: { a: 'ignored', b: 'Hello', c: 'World' },\n    },\n    unsubscribe: {\n      marble: '-a-^-b---c---!---|',\n      values: { a: 'ignored', b: 'Hello', c: 'World' },\n    },\n    complex: {\n      marble: '---(abc)---(def)---|',\n      values: { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 },\n    },\n  };\n\n  // loadExampleButton.addEventListener('click', () => {\n  exampleSelector.addEventListener('change', () => {\n    const selectedExample = exampleSelector.value;\n    if (selectedExample in examples) {\n      const example = examples[selectedExample as keyof typeof examples];\n      viewer.setValues(example.marble, example.values);\n      viewer.render();\n    }\n  });\n\n  // デフォルト例を設定\n  viewer.setValues(examples.basic.marble, examples.basic.values);\n  viewer.render();\n});\n\n// エクスポート（モジュールからの利用をサポート）\nexport { parseMarble, renderSVG, MarbleViewer };\n"],"names":["NotificationKind","SubscriptionKind","MARBLE_SYNTAX","DEFAULT_RENDER_OPTIONS","VALIDATION_PATTERNS","parseMarble","marbleString","options","values","error","includeSubscription","frames","parseMarbleToFrames","framesToMarbleEvents","frameIndex","inGroup","currentGroupValues","char","ensureFrame","index","events","valChars","complete","err","subscribe","unsubscribe","value","createNotification","createSubscriptionNotification","kind","renderCompleteEvent","x","timelineY","s","renderErrorEvent","errorSize","renderNextEvent","markers","notification","escapeXml","renderSubscribeMarker","subscription","renderUnsubscribeMarker","renderSVG","opts","deepMerge","width","height","margin","timeline","frameWidth","drawingWidth","drawingHeight","maxFrame","e","frameToX","frame","svg","i","subscribeEvents","unsubscribeEvents","event","text","base","override","result","key","MarbleViewer","containerId","renderOptions","__publicField","container","formDiv","marbleLabel","valuesLabel","valuesString","blob","url","a","message","errorElement","viewer","exampleSelector","examples","selectedExample","example"],"mappings":"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"}